// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.KycSpider.Client.AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for KycSpiderAPI.
    /// </summary>
    public static partial class KycSpiderAPIExtensions
    {
            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IKycSpiderAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IKycSpiderAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='documentId'>
            /// </param>
            public static SpiderDocumentInfo ApiSpiderDocumentsByClientIdByDocumentIdGet(this IKycSpiderAPI operations, string clientId, string documentId)
            {
                return operations.ApiSpiderDocumentsByClientIdByDocumentIdGetAsync(clientId, documentId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='documentId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SpiderDocumentInfo> ApiSpiderDocumentsByClientIdByDocumentIdGetAsync(this IKycSpiderAPI operations, string clientId, string documentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSpiderDocumentsByClientIdByDocumentIdGetWithHttpMessagesAsync(clientId, documentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            public static VerifiableCustomerInfo ApiVerifiableCustomersByClientIdGet(this IKycSpiderAPI operations, string clientId)
            {
                return operations.ApiVerifiableCustomersByClientIdGetAsync(clientId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VerifiableCustomerInfo> ApiVerifiableCustomersByClientIdGetAsync(this IKycSpiderAPI operations, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiVerifiableCustomersByClientIdGetWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            public static void ApiVerifiableCustomersDisablecheckByClientIdPepPost(this IKycSpiderAPI operations, string clientId)
            {
                operations.ApiVerifiableCustomersDisablecheckByClientIdPepPostAsync(clientId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiVerifiableCustomersDisablecheckByClientIdPepPostAsync(this IKycSpiderAPI operations, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiVerifiableCustomersDisablecheckByClientIdPepPostWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            public static void ApiVerifiableCustomersDisablecheckByClientIdCrimePost(this IKycSpiderAPI operations, string clientId)
            {
                operations.ApiVerifiableCustomersDisablecheckByClientIdCrimePostAsync(clientId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiVerifiableCustomersDisablecheckByClientIdCrimePostAsync(this IKycSpiderAPI operations, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiVerifiableCustomersDisablecheckByClientIdCrimePostWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            public static void ApiVerifiableCustomersDisablecheckByClientIdSanctionPost(this IKycSpiderAPI operations, string clientId)
            {
                operations.ApiVerifiableCustomersDisablecheckByClientIdSanctionPostAsync(clientId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiVerifiableCustomersDisablecheckByClientIdSanctionPostAsync(this IKycSpiderAPI operations, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiVerifiableCustomersDisablecheckByClientIdSanctionPostWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
